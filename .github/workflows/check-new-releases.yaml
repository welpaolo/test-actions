name: Check new builds and release them

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: The name of the product to be released.
      lp-project:
        required: true
        type: string
        description: The LP build project for the product to be released.
      lp-repo:
        required: true
        type: string
        description: The relative path to the LP git repo of the Product to be released.
      lp-branch-prefix:
        required: true
        type: string
        description: The prefix of the LP Git branches producing builds of the Product to be released.
      artifactory-url:
        required: true
        type: string
        description: The url of the artifactor where the jars will be uploaded.
      artifactory-user:
        required: true
        type: string
        description: The username of the artifactory repository.
      artifactory-token:
        required: true
        type: string
        description: The authentication token of the artifactory.
      tarball-regex:
        required: true
        type: string
        description: The regular expression to extract name of the tarball.

env:
  LP_CREDENTIALS: credentials.txt
  OUTPUT_DIR: output

jobs:
  download-builds:
    name: Build project
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Print passed vars
        run: |
          echo "name: ${{ inputs.name }}"
          echo "lp-project: ${{ inputs.lp-project }}"
          echo "lp-repo: ${{ inputs.lp-repo }}"
          echo "lp-branch-prefix: ${{ inputs.lp-branch-prefix }}"
          echo "tarball-regex: ${{ inputs.tarball-regex }}"

      - name: Create credentials file
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}
        run: |
          cat <<EOF >> ${{ env.LP_CREDENTIALS }}
          [1]
          consumer_key = ${CONSUMER_KEY}
          consumer_secret = 
          access_token = ${ACCESS_TOKEN}
          access_secret = ${ACCESS_SECRET}
          EOF
          
          cat credentials.txt

      - name: Install python dependencies
        run: pip install -r requirements.txt

      - name: Create folder for storing the builds
        run: mkdir "${{ env.OUTPUT_DIR }}"; cat "${{ env.LP_CREDENTIALS }}"

      - name: Run download script
        run: |
          python3 launchpad_downloader.py \
            --repository-url ${{ inputs.lp-repo }} \
            --branch-prefix ${{ inputs.lp-branch-prefix }} \
            --credential-file ${{ env.LP_CREDENTIALS }} \
            --output-folder ${{ env.OUTPUT_DIR }}

      - name: Check downloaded builds
        run: ls ${{ env.OUTPUT_DIR }}; zip -r ${{ env.OUTPUT_DIR }}-${{  inputs.name }}.zip ${{ env.OUTPUT_DIR }}

      - name: Store builds
        uses: actions/upload-artifact@v3
        with:
          name: releases-${{  inputs.name }}
          path: ${{ env.OUTPUT_DIR }}-${{  inputs.name }}.zip

      - name: Generate matrix with all built versions
        id: set-matrix
        run: |
          echo "::set-output name=matrix::$(ls -A1 ${{ env.OUTPUT_DIR }} | jq -R -s -c 'split("\n")[:-1]')"
          echo "${{ steps.set-matrix.outputs.matrix }}"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      tarball_name_regex: ${{ inputs.tarball-regex }}

  release-artifact:
    needs: download-builds
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.download-builds.outputs.matrix) }}
    steps:
      - name: Print passed vars
        run: |
          echo "name: ${{ inputs.name }}"
          echo "lp-project: ${{ inputs.lp-project }}"
          echo "lp-repo: ${{ inputs.lp-repo }}"
          echo "lp-branch-prefix: ${{ inputs.lp-branch-prefix }}"
          echo "tarball-regex: ${{ inputs.tarball-regex }}"
          echo "matrix version: ${{ matrix.version }}"

      - name: Download releases
        uses: actions/download-artifact@v3
        with:
          name: releases-${{  inputs.name }}

      - name: List all versions
        run: unzip ${{ env.OUTPUT_DIR }}-${{  inputs.name }}.zip; ls "${{ env.OUTPUT_DIR }}";

      # - name: LP release
      #   id: create-new-lp-release
      #   run: |
      #     ls
      #     tarball=$(find ./ -maxdepth 1 -mindepth 1 -name "${{ env.OUTPUT_DIR }}/${{ matrix.version }}/*${inputs.name}-*.tar.gz")
      #     echo "Tarball name: $tarball"
      #     python3 launchpad_release.py \
      #       --app "${{ inputs.name }}" \
      #       --project "${{ inputs.lp-project }}" \
      #       --version "${{ matrix.version }}" \
      #       --tarball "${tarball}" \
      #       --credentials "${{ env.LP_CREDENTIALS }}"

      - name: Delete previous release
        uses: cb80/delrel@latest
        with:
          tag: ${{ matrix.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
        # uses: liudonghua123/delete-release-action@v1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # with:
        #   release_name: Release ${{ matrix.version }}
        #   tag_name: ${{ matrix.version }}
        #   suppress_errors: false
      
      - name: Get tarball name
        id: get-tarball-name
        run: |
          cd output/${{ matrix.version }}/
          # extract jars from tarball
          count=$( ls ${{ inputs.tarball-regex }} | wc -l )
          if [ $count != 1 ]; then
            echo "Tarball file not found with regex: ${{ inputs.tarball-regex }}"
            exit 1
          fi
          tarball_filename=$(ls ${{ inputs.tarball-regex }})
          echo "Tarball filename: $tarball_filename"
          echo "TARBALL_FILENAME=$tarball_filename" >> $GITHUB_ENV

      - name: Release the package
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{ matrix.version }}
          tag_name: ${{ matrix.version }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_DIR }}/${{ matrix.version }}/${{ env.TARBALL_FILENAME }}
          asset_name: ${{ env.TARBALL_FILENAME }}
          asset_content_type: application/zip

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: output/${{ matrix.version }}/${{ env.TARBALL_FILENAME }}.sha512
          asset_name: ${{ env.TARBALL_FILENAME }}.sha512
          asset_content_type: application/txt

      - name: Upload Java dependencies to artifactory
        run: |
          # doc
          mkdir tmp && tar xf ${{ env.OUTPUT_DIR }}/${{ matrix.version }}/${{ env.TARBALL_FILENAME }} -C tmp --strip-components 1
          cd tmp
          find . -type f -name "*.jar" | awk -F '/' '{print $NF}' > tarball_jars.txt
          cat tarball_jars.txt
          cd ..
          echo "Number of jars to upload: $( wc -l tmp/tarball_jars.txt )"
          readarray -t jar_files < tmp/tarball_jars.txt
          echo "JAR files in the tarball: $jar_files"
          # loop over the mvn local repository
          if [ ! -f ${{ env.OUTPUT_DIR }}/${{ matrix.version }}/repository.zip ]
          then
            echo "No Jar dependencies found!"
            exit 0
          fi
          # unzip maven repository
          unzip ${{ env.OUTPUT_DIR }}/${{ matrix.version }}/repository.zip
          cd repository
          find . -mindepth 3 -maxdepth 10 -type d -ls | awk -F ' ' '{print $11}' > paths.txt
          while read path; do
            count=$( ls "$path"/*.jar 2>/dev/null | wc -l )
            if [ $count != 0 ]
            then 
              echo "Folder anlyzed: $path"
              for jar_file in $( ls "$path"/*.jar | awk -F '/' '{print $NF}'); do 
                echo "JAR FILE: $jar_file"
                if [[ " ${jar_files[*]} " =~ " ${jar_file} " ]]; then
                  for file in "$path"/*; do
                    filename=$(echo "$file" | awk -F '/' '{print $NF}')
                    repo_path="${file:2}"
                    echo "repo_path: $repo_path"
                    folder_structure=${repo_path%"$filename"*}
                    if [[ $filename != _* ]]
                    then 
                      echo "Upload file: $file"
                      curl -X PUT -u "${{ secrets[inputs.artifactory-user] }}":"${{ secrets[inputs.artifactory-token] }}" -T "$file" "${{ secrets[inputs.artifactory-url] }}${folder_structure}"
                    else
                      echo "DO NOT Upload file: $file"
                    fi
                  done
                else
                  echo "Jar file not present in the list: $jar_file"
                fi
              done
            fi 
          done < paths.txt
      
        